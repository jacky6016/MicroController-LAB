#include "io430.h"
#include <intrinsics.h>

void main(void)
{
	WDTCTL = WDTPW + WDTHOLD;
	PortsInit();
	TA0CCTL0 = ;
	
	TA0CCR0 = ;
	
	TA0CTL = TASSEL_1 + ID_1 + MC_1 + TACLR;
	TA1CTL = TASSEL_1 + ID_1 + MC_1 + TACLR;
	TA2CTL = TASSEL_1 + ID_1 + MC_1 + TACLR;

	for(;;)
	{
		__low_power_mode_3();
	}
}

void PortsInit(void)
{

}

#pragma vector = TIMER0_A0_VECTOR
__interrupt void TIMER0_A0_VECTOR(void)
{
	TA0CCTL0_bit.CCIE = 0;		// Disable interrupt
	TA0CCTL0_bit.CCIFG = 0;		// Clear any pending interrupt

	
	TA0CCTL0_bit.CCIE = 1;		// Re-enable interrupt
}

#pragma vector = TIMER0_A1_VECTOR
__interrupt void TIMER0_A1_VECTOR(void)
{
	switch( __even_in_range(TAIV, 14) )
	{
		case 0:				/* No interrupt pending */
			break;
		
		case TA0IV_CCIFG1:	
		
			break;
		
		case TA0IV_CCIFG2:
		
			break;
		
		case TA0IV_CCIFG3:
		
			break;
		
		case TA0IV_CCIFG4:
		
			break;
		
		case TA0IV_CCIFG5:
		
			break;
		
		case TA0IV_CCIFG6:
		
			break;
		
		case TA0IV_TAIFG:
		
			break;
			
		default:
			for(;;)
			{}
			
	}
}

#pragma vector = TIMER1_A0_VECTOR
__interrupt void TIMER1_A0_VECTOR(void)
{


}

#pragma vector = TIMER1_A1_VECTOR
__interrupt void TIMER1_A1_VECTOR(void)
{


}

#pragma vector = TIMER2_A0_VECTOR
__interrupt void TIMER2_A0_VECTOR(void)
{


}

#pragma vector = TIMER2_A1_VECTOR
__interrupt void TIMER2_A1_VECTOR(void)
{


}
