#include "io430.h"
#include "io430f5521.h"
#include "in430.h"



volatile unsigned int result7[20];           
volatile unsigned int result8[20];  
int i=0,j=0;
int main(void)
{
  WDTCTL = WDTPW+WDTHOLD;
  /*SINGLE -Channel Singel-Conversion Mode*/
  REFCTL0 &= ~REFMSTR;
  P6SEL=0X01;
  //set A/D Clock
      ADC12CTL1_bit.ADC12SSEL0= 0;   //select clock source
      ADC12CTL1_bit.ADC12SSEL1= 1;   //select clock source (use MCLK)
      ADC12CTL1_bit.ADC12DIV0=0;    //select clock divider
      ADC12CTL1_bit.ADC12DIV1=0;    //select clock divider
      ADC12CTL1_bit.ADC12DIV2=0;    //select clock divider
      ADC12CTL2_bit.ADC12PDIV=0;    //select predivider
   //A/D CORE SEETING
      ADC12CTL2_bit.ADC12TCOFF= 1;  //turn the temperature sensor off
      ADC12CTL2_bit.ADC12RES0= 0;   //13 cycles conversion time for 12-bits AD
      ADC12CTL2_bit.ADC12RES1= 1;   //13 cycles conversion time for 12-bits AD
      ADC12CTL2_bit.ADC12DF= 0;     //SET OUTPUT FORMAT (靠右)
      ADC12CTL0_bit.ADC12ON= 1;
  /*SET REFERENCE AND GIVE REFERENCE VOLTAGE TO BATTERY*/
    
    //SET UP REFERENCE 
      ADC12CTL0_bit.ADC12REFON= 1;   //Reference on
      ADC12CTL0_bit.ADC12REF2_5V= 1; //SET REFERENCE 2.5V for BATTERY !!!
      ADC12CTL2_bit.ADC12SR= 0;      //Sample Rate
      ADC12CTL2_bit.ADC12REFBURST= 0; //GIVE REFERENCE VOLTAGE TO BATTERY !!!
      ADC12CTL2_bit.ADC12REFOUT= 1;

    /*SET SAMPLE TIME
     Tsample>(0+1.9K)*(ln(2^13))*25p+800ns=1.228uS
     sample clock(? CLK) > 1.228uS*5M = 6.025CLK             
     */
      ADC12CTL1_bit.ADC12SHS0= 0; //Sample and Hold source select
      ADC12CTL1_bit.ADC12SHS1= 0; //Sample and Hold source select
      ADC12CTL1_bit.ADC12ISSH= 0; //"Signal is NOT INVERTED "
      ADC12CTL1_bit.ADC12SHP= 1;  //"Signal is sourced from SAMPLING TIMER"
      ADC12CTL0_bit.ADC12SHT00= 1;//SAMPLE AND HOLD TIME
      ADC12CTL0_bit.ADC12SHT01= 0;//SAMPLE AND HOLD TIME
      ADC12CTL0_bit.ADC12SHT02= 0;//SAMPLE AND HOLD TIME
      ADC12CTL0_bit.ADC12SHT03= 0;//SAMPLE AND HOLD TIME


      //SET  CSTARTADDx && SET INPUT CHHENEL 
      ADC12CTL1_bit.ADC12CSTARTADD0= 1;  //Should start from ADC12MEM7
      ADC12CTL1_bit.ADC12CSTARTADD1= 1;  
      ADC12CTL1_bit.ADC12CSTARTADD2= 1;
      ADC12MCTL7 |= 0x30; 
      ADC12MCTL8 |= 0xb0; 
      ADC12MCTL8_bit.ADC12EOS=0x01;    //Set the endpoint in the ADC12MEM8 
 
      //MULTI-CHANNEL SEETING
      ADC12CTL1_bit.ADC12CONSEQ0= 0;   //Multiple channel or single channel?
      ADC12CTL1_bit.ADC12CONSEQ1= 1;   //Multiple channel or single channel?
      ADC12CTL0_bit.ADC12MSC= 1;   //different from MULTI-CHANNEL transfer?
      
      //SET INTERRUPT
      ADC12IE =0xffff;
      __delay_cycles(35);             // 35us delay to allow Ref to settle
                                      // based on default DCO frequency.                                                     // See Datasheet for typical settle time.
   
      ADC12CTL0 |= ADC12ENC;          
      
   while(1){        
   /***fill this slot to start conversion ******/
   ADC12CTL0 |= ADC12SC;  
     __bis_SR_register(GIE);
    while(ADC12CTL1_bit.ADC12BUSY==1);
    
   }
} 

#pragma vector=ADC12_VECTOR
__interrupt void ADC12ISR (void)
{
  switch(__even_in_range(ADC12IV,34))
  {
  case  0: break;                           // Vector  0:  No interrupt
  case  2: break;                           // Vector  2:  ADC overflow
  case  4: break;                           // Vector  4:  ADC timing overflow
  case  6:                                  // Vector  6:  ADC12IFG0
      break;
  case  8:                                  // Vector  8:  ADC12IFG1
      break;
  case 10: 
    break;                           // Vector 10:  ADC12IFG2
  case 12:
    break;                           // Vector 12:  ADC12IFG3
  case 14: 
    break;                           // Vector 14:  ADC12IFG4
  case 16:
    break;                           // Vector 16:  ADC12IFG5
  case 18: 
    break;                           // Vector 18:  ADC12IFG6
  case 20: 
    result7[++i] = ADC12MEM7;
    if(i==10){i=0;}
    break;                           // Vector 20:  ADC12IFG7
  case 22:
    result8[++j] = ADC12MEM8;
    if(j==10){j=0;}
    break;                           // Vector 22:  ADC12IFG8
  case 24:
    break;                           // Vector 24:  ADC12IFG9
  case 26: 
    break;                           // Vector 26:  ADC12IFG10
  case 28:
    break;                           // Vector 28:  ADC12IFG11
  case 30:
    break;                           // Vector 30:  ADC12IFG12
  case 32:
    break;                           // Vector 32:  ADC12IFG13
  case 34: 
    break;                           // Vector 34:  ADC12IFG14
  default:
    break; 
  }  
}
