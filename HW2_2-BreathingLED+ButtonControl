#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label
;================================My Interrupts==================================
        ORG     0xFFEA
        DW      TA0CC0_HND
        ORG     0xFFE8
        DW      TA0CC1_4_HND
        ORG    	0xFFE2
        DW      TA1CC0_HND
        ORG     0FFD4h
        DW      P2_ISR		
;===============================================================================        
        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment
		
;================================Register Table=================================
;       R5: PWM lower bound               		 R9: Indicates whether LED2 is twinkling or not
;       R6: PWM upper bound        			 R10: temporary register for delay control
;	R7: breathing light mode bit (enhance/dim)	 R11: temporary register for delay control
;	R8: temporary register
;===============================================================================
init:   MOV     #SFE(CSTACK), SP        ; set up stack
main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
;===============================Set Registers===================================        
        MOV.W   #0, R5
        MOV.W   #255, R6
        MOV.W   #1, R7                  ; "Enhance" the LED light
        MOV.W   #0, R9
;================================Set LED1=======================================    
        BIC.B   #BIT0, &P1OUT
        BIS.B   #BIT0, &P1DIR
        BIC.B   #BIT0, &P1SEL
;===============================Set LED2=================================        
        MOV.B   #00000000b, &P4SEL      ; Choose I/O function, not peripheral module function 
        MOV.B   #10000000b, &P4DIR      ; 0: INPUT, I: OUTPUT
        MOV.B   #00000000b, &P4OUT      ;
;==============================Set Button2================================        
        MOV.B   #00000000b, &P2SEL      ; Choose I/O function, not peripheral module function 
        MOV.B   #00000000b, &P2DIR      ; 0: INPUT, I: OUTPUT
        MOV.B   #00000010b, &P2REN      ; Enable pull up/down register(for accuracy)
        MOV.B   #00000010b, &P2OUT      ; must come after REN
        MOV.B   #00000010b, &P2IES      ; High-to-low transition
;================================Timer Configuration============================
        MOV.W   #TASSEL_1 + ID_1 + MC_1 + TACLR, &TA0CTL        ; TA0 for PWM (ACLK + Input divider = 2 + Up mode + Reset TAR, clock divider, count direction)       
        MOV.W   #OUTMOD_7, &TA0CCTL1                            ; Output is reset when the timer counts to the TA0CCR1 value. 
                                                                ; It is set when the timer counts to TA0CCR0 value.
        MOV.W   #255, &TA0CCR0
        MOV.W   #0, &TA0CCR1                                    ; Starts with duty cycle = 0
       
        MOV.W   #TASSEL_1 + ID_1 + MC_1 + TACLR, &TA1CTL        ; TA1 for adjusting duty cycle
        MOV.W   #255, &TA1CCR0
;==============================Clear Interrupt Flags============================ 
        BIC.B   #00000010b, &P2IE
        BIC.W   #CCIFG,  &TA0CCTL1
        BIC.W   #CCIFG, &TA0CCTL0
        BIC.W   #CCIFG, &TA1CCTL0
;===============================Enable interrupts=============================== 
        MOV.W   #CCIE,  &TA1CCTL0                               ; Set CCIE to 1 (Enable interrupt)
        MOV.W   #CCIE,  &TA0CCTL1
        MOV.W   #CCIE,  &TA0CCTL0
        MOV.B   #BIT1,  &P2IE                                   ; Enable P2.1 interrupt
        BIS.W   #GIE,   SR                                      ; Enable general interrupt

             
LED2_TWINKLE:
        CMP     #0, R9
        JZ      Skip
        XOR.B   #BIT7, &P4OUT      ; On/off(toggle) LED2
        call    #SUBDELAY
Skip:
        JMP     LED2_TWINKLE
        
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
                                        
;==================================Timer ISRs==================================== 
TA1CC0_HND:         
        BIC.W   #CCIFG, &TA1CCTL0
        BIC.W   #CCIE,  &TA1CCTL0
        CMP     #1, R7
        JZ      Up
Down:
        CMP     &TA0CCR1, R5
        JGE     Toggle
        JMP     Check
Up:        
        CMP     R6, &TA0CCR1
        JGE     Toggle
        JMP     Check
Toggle:
        XOR.W   #1, R7
Check:
        CMP     #1, R7
        JN      Dim
Enhance:        
        MOV.W   &TA0CCR1, R8
        ADD.W   #4, R8
        MOV.W   R8, &TA0CCR1
        JMP     DONE
Dim:
        MOV.W   &TA0CCR1, R8
        SUB.W   #4, R8
        MOV.W   R8, &TA0CCR1
        JMP     DONE
DONE:   
        BIS.W   #CCIE,  &TA1CCTL0
        RETI                                        

TA0CC0_HND:
        BIC.W   #CCIFG, &TA0CCTL0
        BIC.W   #CCIE,  &TA0CCTL0
        BIS.B   #BIT0, &P1OUT
        BIS.W   #CCIE,  &TA0CCTL0
        RETI
   
TA0CC1_4_HND:
        BIC.W   #CCIFG,  &TA0CCTL1
        BIC.W   #CCIE,  &TA0CCTL1
        BIC.B   #BIT0, &P1OUT
        BIS.W   #CCIE,  &TA0CCTL1
        RETI                       
;==================================Button2 ISR==================================
P2_ISR:
        BIC.B   #00000010b, &P2IE       ; Diasble P2.1(self) interrupt
        BIC.W   #CCIE,  &TA1CCTL0       ; Diasble timer interrupt
        BIC.W   #CCIE,  &TA0CCTL0
        BIC.W   #CCIE,  &TA0CCTL1
        CMP.W   #0, R9
        JNZ     BitBeenSet
        MOV.W   #1, R9
        BIC.B   #BIT0, &P1OUT           ; Turn off LED1
        JMP     Finish
BitBeenSet:        
        MOV.W   #0, R9
        BIC.B   #BIT7, &P4OUT
        BIS.W   #CCIE,  &TA1CCTL0       ; Enable timer interrupt
        BIS.W   #CCIE,  &TA0CCTL0
        BIS.W   #CCIE,  &TA0CCTL1
Finish: 
        BIC.B   #00000010b, &P2IFG      ; Clean P2 interrupt flag
        BIS.B   #00000010b, &P2IE       ; Enable P2.1 interrupt
        RETI                            ; Return from interrupt
;================================DELAY code==================================
SUBDELAY:
        mov.w   #700,R10                ; 2 cycle
Delay1: sub     #1 ,R10                  ; 1 cycle
        mov.w   #250,R11                 ; 2 cycle
Delay2: sub     #1 ,R11                  ; 1 cycle     
        cmp     #0,R11                   ; 1 cycle
        jnz     Delay2                  ; 2 cycle   
        cmp     #0,R10                  ; 1 cycle
        jnz     Delay1                  ; 2 cycle
        ret
        
        END
