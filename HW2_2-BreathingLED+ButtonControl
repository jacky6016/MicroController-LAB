#include "io430.h"
#include <intrinsics.h>

#define	DELAY10ms	40
#define PORT_1	P4OUT_bit.P4OUT_3
#define PORT_2	P1OUT_bit.P1OUT_2
#define PORT_3	P1OUT_bit.P1OUT_3
#define PORT_4	P1OUT_bit.P1OUT_4
#define PORT_5	P1OUT_bit.P1OUT_5
#define PORT_6	P2OUT_bit.P2OUT_4
#define PORT_7	P2OUT_bit.P2OUT_5

void PortsInit(void);
void TimerInit(void);

void main(void)
{
	WDTCTL = WDTPW | WDTHOLD;       // Stop watchdog timer to prevent time out reset
	//PortsInit();
	TimerInit();
	
		
	TA0CCTL0 = CCIE;
	TA0CCTL1 = CCIE;
	TA0CCTL2 = CCIE;
	TA0CCTL3 = CCIE;
	TA0CCTL4 = CCIE;
	TA1CCTL0 = CCIE;
	TA1CCTL1 = CCIE;
	TA1CCTL2 = CCIE;
	TA2CCTL0 = CCIE;
	TA2CCTL1 = CCIE;
	TA2CCTL2 = CCIE;
	
	//TA0CCR0 = ;
	TA0CCR0
	TA0CCR1
	TA0CCR2
	TA0CCR3
	TA0CCR4
	TA1CCR0
	TA1CCR1
	TA1CCR2
	TA2CCR0
	TA2CCR1
	TA2CCR2
	

	for(;;)
	{
		__low_power_mode_3();
	}
}

void PortsInit(void)
{
	P1OUT = 0;
	P1DIR = ;
	P1SEL = ;
	P1IES = ;
}

void TimerInit(void)
{
	TA0CTL = TASSEL_1 | ID_1 | MC_1 | TACLR;
	TA1CTL = TASSEL_1 | ID_1 | MC_1 | TACLR;
	TA2CTL = TASSEL_1 | ID_1 | MC_1 | TACLR;
}
#pragma vector = TIMER0_A0_VECTOR
__interrupt void TA0CC0_ISR(void)
{
	TA0CCTL0_bit.CCIE = 0;		// Disable interrupt
	
	PORT_1 = 0;

	TA0CCTL0_bit.CCIFG = 0;		// Clear any pending interrupt
	TA0CCTL0_bit.CCIE = 1;		// Re-enable interrupt
}

#pragma vector = TIMER0_A1_VECTOR
__interrupt void TA0CC1_4_ISR(void)
{
	switch( __even_in_range(TA0IV, 14) )
	{
		case TA0IV_NONE:        /* No interrupt pending */
			break;
		
		case TA0IV_TACCR1:	
			TA0CCTL1_bit.CCIE = 0;
			PORT_1 = 1;
			TA0CCTL1_bit.CCIFG = 0;
			TA0CCTL1_bit.CCIE = 1;
			break;
		
		case TA0IV_TACCR2:
		
			break;
		
		case TA0IV_TACCR3:
		
			break;
		
		case TA0IV_TACCR4:
		
			break;
		
		case TA0IV_5:		
			break;
		
		case TA0IV_6:		
			break;
		
		case TA0IV_TAIFG:
		
			break;
			
		default:
			for(;;)
			{}
			
	}
}

#pragma vector = TIMER1_A0_VECTOR
__interrupt void TA1CC0_ISR(void)
{


}

#pragma vector = TIMER1_A1_VECTOR
__interrupt void TA1CC1_2_ISR(void)
{
	switch( __even_in_range(TA1IV, 14) )
	{
		case TA1IV_NONE:        /* No interrupt pending */
			break;
		
		case TA1IV_TACCR1:	
		
			break;
		
		case TA1IV_TACCR2:
		
			break;
		
		case TA1IV_3:		
			break;
		
		case TA1IV_4:		
			break;
		
		case TA1IV_5:		
			break;
		
		case TA1IV_6:		
			break;
		
		case TA1IV_TAIFG:
		
			break;
			
		default:
			for(;;)
			{}
			
	}

}

#pragma vector = TIMER2_A0_VECTOR
__interrupt void TA2CC0_ISR(void)
{


}

#pragma vector = TIMER2_A1_VECTOR
__interrupt void TA2CC1_4_ISR(void)
{
	switch( __even_in_range(TA2IV, 14) )
	{
		case TA2IV_NONE:        /* No interrupt pending */
			break;
		
		case TA2IV_TACCR1:	
		
			break;
		
		case TA2IV_TACCR2:
		
			break;
		
		case TA2IV_3:		
			break;
		
		case TA2IV_4:		
			break;
		
		case TA2IV_5:		
			break;
		
		case TA2IV_6:		
			break;
		
		case TA2IV_TAIFG:
		
			break;
			
		default:
			for(;;)
			{}
			
	}

}
