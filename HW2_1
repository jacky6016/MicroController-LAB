#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label
        
        ORG     0xFFEA
        DW      TA0_HND        
	ORG    	0xFFE2
        DW      TA1_HND

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack
;================================Register Table=================================
;       R5:          R7:        
;       R6:         R8:               
;===============================================================================
main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
;===============================Register Setting================================        
        MOV.W   #0, R5
        MOV.W   #255, R6
        MOV.W   #1, R7          ; "Enhance" the LED light
;================================LED Configuration==============================    
        BIS.B   #BIT0, &P1DIR
        BIC.B   #BIT0, &P1SEL
;================================Timer Configuration============================
        MOV.W   #TASSEL_1 + ID_1 + MC_1 + TACLR, &TA0CTL        ; TA0 for PWM (ACLK + Input divider = 2 + Up mode + Reset TAR, clock divider, count direction)       
        ;MOV.W   #OUTMOD_7, &TA0CCTL1                            ; Output is reset when the timer counts to the TA0CCR1 value. 
                                                                ; It is set when the timer counts to TA0CCR0 value.
	

        MOV.W   #255, &TA0CCR0
        MOV.W   #0, &TA0CCR1                                    ; Starts with duty cycle = 0
       
        MOV.W   #TASSEL_1 + ID_1 + MC_1 + TACLR, &TA1CTL        ; TA1 for adjusting duty cycle
        MOV.W   #255, &TA1CCR0
        MOV.W   #CCIE,  &TA1CCTL0                               ; Set CCIE to 1 (Enable interrupt)
        BIS.W	#TAIE, &TA0CTL
        BIS.W   #GIE,SR                                         ; Enable general interrupt

        
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
                                        
;==================================Timer ISR==================================== 
TA0_HND:
	BIS.B   #BIT0, &P1OUT
	CMP     &TA0CCR1, &TAR
	JL	TA0_HND
	BIC.B   #BIT0, &P1OUT
	RETI
TA1_HND:         
        CMP     #1, R7
        JZ      Up
Down:
        CMP     R5, &TA0CCR1
        JZ      Toggle
        JMP     Check
Up:        
        CMP     R6, &TA0CCR1
        JGE     Toggle
        JMP     Check
Toggle:
        XOR.W   #1, R7
Check:
        CMP     #1, R7
        JN      Dim
Enhance:        
        MOV.W   &TA0CCR1, R8
        ADD.W   #4, R8
        MOV.W   R8, &TA0CCR1
        JMP     DONE
Dim:
        MOV.W   &TA0CCR1, R8
        SUB.W   #4, R8
        MOV.W   R8, &TA0CCR1
        JMP     DONE
DONE:   
        RETI                                        
 
        END
